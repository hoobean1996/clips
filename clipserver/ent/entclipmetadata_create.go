// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntClipMetadataCreate is the builder for creating a EntClipMetadata entity.
type EntClipMetadataCreate struct {
	config
	mutation *EntClipMetadataMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (ecmc *EntClipMetadataCreate) SetFilename(s string) *EntClipMetadataCreate {
	ecmc.mutation.SetFilename(s)
	return ecmc
}

// SetFileURL sets the "file_url" field.
func (ecmc *EntClipMetadataCreate) SetFileURL(s string) *EntClipMetadataCreate {
	ecmc.mutation.SetFileURL(s)
	return ecmc
}

// SetFileSize sets the "file_size" field.
func (ecmc *EntClipMetadataCreate) SetFileSize(i int64) *EntClipMetadataCreate {
	ecmc.mutation.SetFileSize(i)
	return ecmc
}

// SetDuration sets the "duration" field.
func (ecmc *EntClipMetadataCreate) SetDuration(i int) *EntClipMetadataCreate {
	ecmc.mutation.SetDuration(i)
	return ecmc
}

// SetFormat sets the "format" field.
func (ecmc *EntClipMetadataCreate) SetFormat(s string) *EntClipMetadataCreate {
	ecmc.mutation.SetFormat(s)
	return ecmc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (ecmc *EntClipMetadataCreate) SetNillableFormat(s *string) *EntClipMetadataCreate {
	if s != nil {
		ecmc.SetFormat(*s)
	}
	return ecmc
}

// Mutation returns the EntClipMetadataMutation object of the builder.
func (ecmc *EntClipMetadataCreate) Mutation() *EntClipMetadataMutation {
	return ecmc.mutation
}

// Save creates the EntClipMetadata in the database.
func (ecmc *EntClipMetadataCreate) Save(ctx context.Context) (*EntClipMetadata, error) {
	ecmc.defaults()
	return withHooks(ctx, ecmc.sqlSave, ecmc.mutation, ecmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecmc *EntClipMetadataCreate) SaveX(ctx context.Context) *EntClipMetadata {
	v, err := ecmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecmc *EntClipMetadataCreate) Exec(ctx context.Context) error {
	_, err := ecmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmc *EntClipMetadataCreate) ExecX(ctx context.Context) {
	if err := ecmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecmc *EntClipMetadataCreate) defaults() {
	if _, ok := ecmc.mutation.Format(); !ok {
		v := entclipmetadata.DefaultFormat
		ecmc.mutation.SetFormat(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecmc *EntClipMetadataCreate) check() error {
	if _, ok := ecmc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "EntClipMetadata.filename"`)}
	}
	if v, ok := ecmc.mutation.Filename(); ok {
		if err := entclipmetadata.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.filename": %w`, err)}
		}
	}
	if _, ok := ecmc.mutation.FileURL(); !ok {
		return &ValidationError{Name: "file_url", err: errors.New(`ent: missing required field "EntClipMetadata.file_url"`)}
	}
	if v, ok := ecmc.mutation.FileURL(); ok {
		if err := entclipmetadata.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_url": %w`, err)}
		}
	}
	if _, ok := ecmc.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`ent: missing required field "EntClipMetadata.file_size"`)}
	}
	if v, ok := ecmc.mutation.FileSize(); ok {
		if err := entclipmetadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_size": %w`, err)}
		}
	}
	if _, ok := ecmc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "EntClipMetadata.duration"`)}
	}
	if v, ok := ecmc.mutation.Duration(); ok {
		if err := entclipmetadata.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.duration": %w`, err)}
		}
	}
	if _, ok := ecmc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "EntClipMetadata.format"`)}
	}
	return nil
}

func (ecmc *EntClipMetadataCreate) sqlSave(ctx context.Context) (*EntClipMetadata, error) {
	if err := ecmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ecmc.mutation.id = &_node.ID
	ecmc.mutation.done = true
	return _node, nil
}

func (ecmc *EntClipMetadataCreate) createSpec() (*EntClipMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &EntClipMetadata{config: ecmc.config}
		_spec = sqlgraph.NewCreateSpec(entclipmetadata.Table, sqlgraph.NewFieldSpec(entclipmetadata.FieldID, field.TypeInt))
	)
	if value, ok := ecmc.mutation.Filename(); ok {
		_spec.SetField(entclipmetadata.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := ecmc.mutation.FileURL(); ok {
		_spec.SetField(entclipmetadata.FieldFileURL, field.TypeString, value)
		_node.FileURL = value
	}
	if value, ok := ecmc.mutation.FileSize(); ok {
		_spec.SetField(entclipmetadata.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := ecmc.mutation.Duration(); ok {
		_spec.SetField(entclipmetadata.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := ecmc.mutation.Format(); ok {
		_spec.SetField(entclipmetadata.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	return _node, _spec
}

// EntClipMetadataCreateBulk is the builder for creating many EntClipMetadata entities in bulk.
type EntClipMetadataCreateBulk struct {
	config
	err      error
	builders []*EntClipMetadataCreate
}

// Save creates the EntClipMetadata entities in the database.
func (ecmcb *EntClipMetadataCreateBulk) Save(ctx context.Context) ([]*EntClipMetadata, error) {
	if ecmcb.err != nil {
		return nil, ecmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecmcb.builders))
	nodes := make([]*EntClipMetadata, len(ecmcb.builders))
	mutators := make([]Mutator, len(ecmcb.builders))
	for i := range ecmcb.builders {
		func(i int, root context.Context) {
			builder := ecmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntClipMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecmcb *EntClipMetadataCreateBulk) SaveX(ctx context.Context) []*EntClipMetadata {
	v, err := ecmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecmcb *EntClipMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := ecmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmcb *EntClipMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := ecmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
