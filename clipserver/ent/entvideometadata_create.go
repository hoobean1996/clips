// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"com.gigaboo/clipserver/ent/entvideometadata"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntVideoMetadataCreate is the builder for creating a EntVideoMetadata entity.
type EntVideoMetadataCreate struct {
	config
	mutation *EntVideoMetadataMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (evmc *EntVideoMetadataCreate) SetURL(s string) *EntVideoMetadataCreate {
	evmc.mutation.SetURL(s)
	return evmc
}

// SetFilename sets the "filename" field.
func (evmc *EntVideoMetadataCreate) SetFilename(s string) *EntVideoMetadataCreate {
	evmc.mutation.SetFilename(s)
	return evmc
}

// SetFileSize sets the "file_size" field.
func (evmc *EntVideoMetadataCreate) SetFileSize(i int64) *EntVideoMetadataCreate {
	evmc.mutation.SetFileSize(i)
	return evmc
}

// SetContentType sets the "content_type" field.
func (evmc *EntVideoMetadataCreate) SetContentType(s string) *EntVideoMetadataCreate {
	evmc.mutation.SetContentType(s)
	return evmc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (evmc *EntVideoMetadataCreate) SetNillableContentType(s *string) *EntVideoMetadataCreate {
	if s != nil {
		evmc.SetContentType(*s)
	}
	return evmc
}

// Mutation returns the EntVideoMetadataMutation object of the builder.
func (evmc *EntVideoMetadataCreate) Mutation() *EntVideoMetadataMutation {
	return evmc.mutation
}

// Save creates the EntVideoMetadata in the database.
func (evmc *EntVideoMetadataCreate) Save(ctx context.Context) (*EntVideoMetadata, error) {
	evmc.defaults()
	return withHooks(ctx, evmc.sqlSave, evmc.mutation, evmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (evmc *EntVideoMetadataCreate) SaveX(ctx context.Context) *EntVideoMetadata {
	v, err := evmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evmc *EntVideoMetadataCreate) Exec(ctx context.Context) error {
	_, err := evmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evmc *EntVideoMetadataCreate) ExecX(ctx context.Context) {
	if err := evmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evmc *EntVideoMetadataCreate) defaults() {
	if _, ok := evmc.mutation.ContentType(); !ok {
		v := entvideometadata.DefaultContentType
		evmc.mutation.SetContentType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evmc *EntVideoMetadataCreate) check() error {
	if _, ok := evmc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "EntVideoMetadata.url"`)}
	}
	if _, ok := evmc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "EntVideoMetadata.filename"`)}
	}
	if _, ok := evmc.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`ent: missing required field "EntVideoMetadata.file_size"`)}
	}
	if v, ok := evmc.mutation.FileSize(); ok {
		if err := entvideometadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntVideoMetadata.file_size": %w`, err)}
		}
	}
	if _, ok := evmc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "EntVideoMetadata.content_type"`)}
	}
	return nil
}

func (evmc *EntVideoMetadataCreate) sqlSave(ctx context.Context) (*EntVideoMetadata, error) {
	if err := evmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := evmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, evmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	evmc.mutation.id = &_node.ID
	evmc.mutation.done = true
	return _node, nil
}

func (evmc *EntVideoMetadataCreate) createSpec() (*EntVideoMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &EntVideoMetadata{config: evmc.config}
		_spec = sqlgraph.NewCreateSpec(entvideometadata.Table, sqlgraph.NewFieldSpec(entvideometadata.FieldID, field.TypeInt))
	)
	if value, ok := evmc.mutation.URL(); ok {
		_spec.SetField(entvideometadata.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := evmc.mutation.Filename(); ok {
		_spec.SetField(entvideometadata.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := evmc.mutation.FileSize(); ok {
		_spec.SetField(entvideometadata.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := evmc.mutation.ContentType(); ok {
		_spec.SetField(entvideometadata.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	return _node, _spec
}

// EntVideoMetadataCreateBulk is the builder for creating many EntVideoMetadata entities in bulk.
type EntVideoMetadataCreateBulk struct {
	config
	err      error
	builders []*EntVideoMetadataCreate
}

// Save creates the EntVideoMetadata entities in the database.
func (evmcb *EntVideoMetadataCreateBulk) Save(ctx context.Context) ([]*EntVideoMetadata, error) {
	if evmcb.err != nil {
		return nil, evmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(evmcb.builders))
	nodes := make([]*EntVideoMetadata, len(evmcb.builders))
	mutators := make([]Mutator, len(evmcb.builders))
	for i := range evmcb.builders {
		func(i int, root context.Context) {
			builder := evmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntVideoMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, evmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, evmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, evmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (evmcb *EntVideoMetadataCreateBulk) SaveX(ctx context.Context) []*EntVideoMetadata {
	v, err := evmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evmcb *EntVideoMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := evmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evmcb *EntVideoMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := evmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
