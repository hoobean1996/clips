// Code generated by ent, DO NOT EDIT.

package entvideometadata

import (
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldURL, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldFilename, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldFileSize, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldContentType, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContainsFold(FieldURL, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContainsFold(FieldFilename, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLTE(FieldFileSize, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.FieldContainsFold(FieldContentType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntVideoMetadata) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntVideoMetadata) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntVideoMetadata) predicate.EntVideoMetadata {
	return predicate.EntVideoMetadata(sql.NotPredicates(p))
}
