// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EntClipMetadata is the model entity for the EntClipMetadata schema.
type EntClipMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 剪辑文件名
	Filename string `json:"filename,omitempty"`
	// 剪辑文件访问地址
	FileURL string `json:"file_url,omitempty"`
	// 文件大小（字节）
	FileSize int64 `json:"file_size,omitempty"`
	// 视频时长（秒）
	Duration int `json:"duration,omitempty"`
	// 视频格式
	Format string `json:"format,omitempty"`
	// Word holds the value of the "word" field.
	Word *string `json:"word,omitempty"`
	// Sentence holds the value of the "sentence" field.
	Sentence *string `json:"sentence,omitempty"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail    *string `json:"thumbnail,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntClipMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entclipmetadata.FieldID, entclipmetadata.FieldFileSize, entclipmetadata.FieldDuration:
			values[i] = new(sql.NullInt64)
		case entclipmetadata.FieldFilename, entclipmetadata.FieldFileURL, entclipmetadata.FieldFormat, entclipmetadata.FieldWord, entclipmetadata.FieldSentence, entclipmetadata.FieldThumbnail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntClipMetadata fields.
func (ecm *EntClipMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entclipmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ecm.ID = int(value.Int64)
		case entclipmetadata.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				ecm.Filename = value.String
			}
		case entclipmetadata.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				ecm.FileURL = value.String
			}
		case entclipmetadata.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				ecm.FileSize = value.Int64
			}
		case entclipmetadata.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				ecm.Duration = int(value.Int64)
			}
		case entclipmetadata.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				ecm.Format = value.String
			}
		case entclipmetadata.FieldWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word", values[i])
			} else if value.Valid {
				ecm.Word = new(string)
				*ecm.Word = value.String
			}
		case entclipmetadata.FieldSentence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sentence", values[i])
			} else if value.Valid {
				ecm.Sentence = new(string)
				*ecm.Sentence = value.String
			}
		case entclipmetadata.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				ecm.Thumbnail = new(string)
				*ecm.Thumbnail = value.String
			}
		default:
			ecm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntClipMetadata.
// This includes values selected through modifiers, order, etc.
func (ecm *EntClipMetadata) Value(name string) (ent.Value, error) {
	return ecm.selectValues.Get(name)
}

// Update returns a builder for updating this EntClipMetadata.
// Note that you need to call EntClipMetadata.Unwrap() before calling this method if this EntClipMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (ecm *EntClipMetadata) Update() *EntClipMetadataUpdateOne {
	return NewEntClipMetadataClient(ecm.config).UpdateOne(ecm)
}

// Unwrap unwraps the EntClipMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ecm *EntClipMetadata) Unwrap() *EntClipMetadata {
	_tx, ok := ecm.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntClipMetadata is not a transactional entity")
	}
	ecm.config.driver = _tx.drv
	return ecm
}

// String implements the fmt.Stringer.
func (ecm *EntClipMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("EntClipMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ecm.ID))
	builder.WriteString("filename=")
	builder.WriteString(ecm.Filename)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(ecm.FileURL)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", ecm.FileSize))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", ecm.Duration))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(ecm.Format)
	builder.WriteString(", ")
	if v := ecm.Word; v != nil {
		builder.WriteString("word=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ecm.Sentence; v != nil {
		builder.WriteString("sentence=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ecm.Thumbnail; v != nil {
		builder.WriteString("thumbnail=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// EntClipMetadataSlice is a parsable slice of EntClipMetadata.
type EntClipMetadataSlice []*EntClipMetadata
