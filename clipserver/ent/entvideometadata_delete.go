// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"com.gigaboo/clipserver/ent/entvideometadata"
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntVideoMetadataDelete is the builder for deleting a EntVideoMetadata entity.
type EntVideoMetadataDelete struct {
	config
	hooks    []Hook
	mutation *EntVideoMetadataMutation
}

// Where appends a list predicates to the EntVideoMetadataDelete builder.
func (evmd *EntVideoMetadataDelete) Where(ps ...predicate.EntVideoMetadata) *EntVideoMetadataDelete {
	evmd.mutation.Where(ps...)
	return evmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (evmd *EntVideoMetadataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, evmd.sqlExec, evmd.mutation, evmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (evmd *EntVideoMetadataDelete) ExecX(ctx context.Context) int {
	n, err := evmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (evmd *EntVideoMetadataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(entvideometadata.Table, sqlgraph.NewFieldSpec(entvideometadata.FieldID, field.TypeInt))
	if ps := evmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, evmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	evmd.mutation.done = true
	return affected, err
}

// EntVideoMetadataDeleteOne is the builder for deleting a single EntVideoMetadata entity.
type EntVideoMetadataDeleteOne struct {
	evmd *EntVideoMetadataDelete
}

// Where appends a list predicates to the EntVideoMetadataDelete builder.
func (evmdo *EntVideoMetadataDeleteOne) Where(ps ...predicate.EntVideoMetadata) *EntVideoMetadataDeleteOne {
	evmdo.evmd.mutation.Where(ps...)
	return evmdo
}

// Exec executes the deletion query.
func (evmdo *EntVideoMetadataDeleteOne) Exec(ctx context.Context) error {
	n, err := evmdo.evmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{entvideometadata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (evmdo *EntVideoMetadataDeleteOne) ExecX(ctx context.Context) {
	if err := evmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
