// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntClipMetadataUpdate is the builder for updating EntClipMetadata entities.
type EntClipMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *EntClipMetadataMutation
}

// Where appends a list predicates to the EntClipMetadataUpdate builder.
func (ecmu *EntClipMetadataUpdate) Where(ps ...predicate.EntClipMetadata) *EntClipMetadataUpdate {
	ecmu.mutation.Where(ps...)
	return ecmu
}

// SetFilename sets the "filename" field.
func (ecmu *EntClipMetadataUpdate) SetFilename(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetFilename(s)
	return ecmu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableFilename(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetFilename(*s)
	}
	return ecmu
}

// SetFileURL sets the "file_url" field.
func (ecmu *EntClipMetadataUpdate) SetFileURL(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetFileURL(s)
	return ecmu
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableFileURL(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetFileURL(*s)
	}
	return ecmu
}

// SetFileSize sets the "file_size" field.
func (ecmu *EntClipMetadataUpdate) SetFileSize(i int64) *EntClipMetadataUpdate {
	ecmu.mutation.ResetFileSize()
	ecmu.mutation.SetFileSize(i)
	return ecmu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableFileSize(i *int64) *EntClipMetadataUpdate {
	if i != nil {
		ecmu.SetFileSize(*i)
	}
	return ecmu
}

// AddFileSize adds i to the "file_size" field.
func (ecmu *EntClipMetadataUpdate) AddFileSize(i int64) *EntClipMetadataUpdate {
	ecmu.mutation.AddFileSize(i)
	return ecmu
}

// SetDuration sets the "duration" field.
func (ecmu *EntClipMetadataUpdate) SetDuration(i int) *EntClipMetadataUpdate {
	ecmu.mutation.ResetDuration()
	ecmu.mutation.SetDuration(i)
	return ecmu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableDuration(i *int) *EntClipMetadataUpdate {
	if i != nil {
		ecmu.SetDuration(*i)
	}
	return ecmu
}

// AddDuration adds i to the "duration" field.
func (ecmu *EntClipMetadataUpdate) AddDuration(i int) *EntClipMetadataUpdate {
	ecmu.mutation.AddDuration(i)
	return ecmu
}

// SetFormat sets the "format" field.
func (ecmu *EntClipMetadataUpdate) SetFormat(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetFormat(s)
	return ecmu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableFormat(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetFormat(*s)
	}
	return ecmu
}

// SetWord sets the "word" field.
func (ecmu *EntClipMetadataUpdate) SetWord(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetWord(s)
	return ecmu
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableWord(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetWord(*s)
	}
	return ecmu
}

// SetSentence sets the "sentence" field.
func (ecmu *EntClipMetadataUpdate) SetSentence(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetSentence(s)
	return ecmu
}

// SetNillableSentence sets the "sentence" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableSentence(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetSentence(*s)
	}
	return ecmu
}

// SetThumbnail sets the "thumbnail" field.
func (ecmu *EntClipMetadataUpdate) SetThumbnail(s string) *EntClipMetadataUpdate {
	ecmu.mutation.SetThumbnail(s)
	return ecmu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (ecmu *EntClipMetadataUpdate) SetNillableThumbnail(s *string) *EntClipMetadataUpdate {
	if s != nil {
		ecmu.SetThumbnail(*s)
	}
	return ecmu
}

// Mutation returns the EntClipMetadataMutation object of the builder.
func (ecmu *EntClipMetadataUpdate) Mutation() *EntClipMetadataMutation {
	return ecmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecmu *EntClipMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecmu.sqlSave, ecmu.mutation, ecmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecmu *EntClipMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := ecmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecmu *EntClipMetadataUpdate) Exec(ctx context.Context) error {
	_, err := ecmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmu *EntClipMetadataUpdate) ExecX(ctx context.Context) {
	if err := ecmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecmu *EntClipMetadataUpdate) check() error {
	if v, ok := ecmu.mutation.Filename(); ok {
		if err := entclipmetadata.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.filename": %w`, err)}
		}
	}
	if v, ok := ecmu.mutation.FileURL(); ok {
		if err := entclipmetadata.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_url": %w`, err)}
		}
	}
	if v, ok := ecmu.mutation.FileSize(); ok {
		if err := entclipmetadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_size": %w`, err)}
		}
	}
	if v, ok := ecmu.mutation.Duration(); ok {
		if err := entclipmetadata.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.duration": %w`, err)}
		}
	}
	return nil
}

func (ecmu *EntClipMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entclipmetadata.Table, entclipmetadata.Columns, sqlgraph.NewFieldSpec(entclipmetadata.FieldID, field.TypeInt))
	if ps := ecmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecmu.mutation.Filename(); ok {
		_spec.SetField(entclipmetadata.FieldFilename, field.TypeString, value)
	}
	if value, ok := ecmu.mutation.FileURL(); ok {
		_spec.SetField(entclipmetadata.FieldFileURL, field.TypeString, value)
	}
	if value, ok := ecmu.mutation.FileSize(); ok {
		_spec.SetField(entclipmetadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := ecmu.mutation.AddedFileSize(); ok {
		_spec.AddField(entclipmetadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := ecmu.mutation.Duration(); ok {
		_spec.SetField(entclipmetadata.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ecmu.mutation.AddedDuration(); ok {
		_spec.AddField(entclipmetadata.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ecmu.mutation.Format(); ok {
		_spec.SetField(entclipmetadata.FieldFormat, field.TypeString, value)
	}
	if value, ok := ecmu.mutation.Word(); ok {
		_spec.SetField(entclipmetadata.FieldWord, field.TypeString, value)
	}
	if value, ok := ecmu.mutation.Sentence(); ok {
		_spec.SetField(entclipmetadata.FieldSentence, field.TypeString, value)
	}
	if value, ok := ecmu.mutation.Thumbnail(); ok {
		_spec.SetField(entclipmetadata.FieldThumbnail, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entclipmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecmu.mutation.done = true
	return n, nil
}

// EntClipMetadataUpdateOne is the builder for updating a single EntClipMetadata entity.
type EntClipMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntClipMetadataMutation
}

// SetFilename sets the "filename" field.
func (ecmuo *EntClipMetadataUpdateOne) SetFilename(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetFilename(s)
	return ecmuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableFilename(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetFilename(*s)
	}
	return ecmuo
}

// SetFileURL sets the "file_url" field.
func (ecmuo *EntClipMetadataUpdateOne) SetFileURL(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetFileURL(s)
	return ecmuo
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableFileURL(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetFileURL(*s)
	}
	return ecmuo
}

// SetFileSize sets the "file_size" field.
func (ecmuo *EntClipMetadataUpdateOne) SetFileSize(i int64) *EntClipMetadataUpdateOne {
	ecmuo.mutation.ResetFileSize()
	ecmuo.mutation.SetFileSize(i)
	return ecmuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableFileSize(i *int64) *EntClipMetadataUpdateOne {
	if i != nil {
		ecmuo.SetFileSize(*i)
	}
	return ecmuo
}

// AddFileSize adds i to the "file_size" field.
func (ecmuo *EntClipMetadataUpdateOne) AddFileSize(i int64) *EntClipMetadataUpdateOne {
	ecmuo.mutation.AddFileSize(i)
	return ecmuo
}

// SetDuration sets the "duration" field.
func (ecmuo *EntClipMetadataUpdateOne) SetDuration(i int) *EntClipMetadataUpdateOne {
	ecmuo.mutation.ResetDuration()
	ecmuo.mutation.SetDuration(i)
	return ecmuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableDuration(i *int) *EntClipMetadataUpdateOne {
	if i != nil {
		ecmuo.SetDuration(*i)
	}
	return ecmuo
}

// AddDuration adds i to the "duration" field.
func (ecmuo *EntClipMetadataUpdateOne) AddDuration(i int) *EntClipMetadataUpdateOne {
	ecmuo.mutation.AddDuration(i)
	return ecmuo
}

// SetFormat sets the "format" field.
func (ecmuo *EntClipMetadataUpdateOne) SetFormat(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetFormat(s)
	return ecmuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableFormat(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetFormat(*s)
	}
	return ecmuo
}

// SetWord sets the "word" field.
func (ecmuo *EntClipMetadataUpdateOne) SetWord(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetWord(s)
	return ecmuo
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableWord(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetWord(*s)
	}
	return ecmuo
}

// SetSentence sets the "sentence" field.
func (ecmuo *EntClipMetadataUpdateOne) SetSentence(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetSentence(s)
	return ecmuo
}

// SetNillableSentence sets the "sentence" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableSentence(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetSentence(*s)
	}
	return ecmuo
}

// SetThumbnail sets the "thumbnail" field.
func (ecmuo *EntClipMetadataUpdateOne) SetThumbnail(s string) *EntClipMetadataUpdateOne {
	ecmuo.mutation.SetThumbnail(s)
	return ecmuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (ecmuo *EntClipMetadataUpdateOne) SetNillableThumbnail(s *string) *EntClipMetadataUpdateOne {
	if s != nil {
		ecmuo.SetThumbnail(*s)
	}
	return ecmuo
}

// Mutation returns the EntClipMetadataMutation object of the builder.
func (ecmuo *EntClipMetadataUpdateOne) Mutation() *EntClipMetadataMutation {
	return ecmuo.mutation
}

// Where appends a list predicates to the EntClipMetadataUpdate builder.
func (ecmuo *EntClipMetadataUpdateOne) Where(ps ...predicate.EntClipMetadata) *EntClipMetadataUpdateOne {
	ecmuo.mutation.Where(ps...)
	return ecmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecmuo *EntClipMetadataUpdateOne) Select(field string, fields ...string) *EntClipMetadataUpdateOne {
	ecmuo.fields = append([]string{field}, fields...)
	return ecmuo
}

// Save executes the query and returns the updated EntClipMetadata entity.
func (ecmuo *EntClipMetadataUpdateOne) Save(ctx context.Context) (*EntClipMetadata, error) {
	return withHooks(ctx, ecmuo.sqlSave, ecmuo.mutation, ecmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecmuo *EntClipMetadataUpdateOne) SaveX(ctx context.Context) *EntClipMetadata {
	node, err := ecmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecmuo *EntClipMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := ecmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmuo *EntClipMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := ecmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecmuo *EntClipMetadataUpdateOne) check() error {
	if v, ok := ecmuo.mutation.Filename(); ok {
		if err := entclipmetadata.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.filename": %w`, err)}
		}
	}
	if v, ok := ecmuo.mutation.FileURL(); ok {
		if err := entclipmetadata.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_url": %w`, err)}
		}
	}
	if v, ok := ecmuo.mutation.FileSize(); ok {
		if err := entclipmetadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.file_size": %w`, err)}
		}
	}
	if v, ok := ecmuo.mutation.Duration(); ok {
		if err := entclipmetadata.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "EntClipMetadata.duration": %w`, err)}
		}
	}
	return nil
}

func (ecmuo *EntClipMetadataUpdateOne) sqlSave(ctx context.Context) (_node *EntClipMetadata, err error) {
	if err := ecmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entclipmetadata.Table, entclipmetadata.Columns, sqlgraph.NewFieldSpec(entclipmetadata.FieldID, field.TypeInt))
	id, ok := ecmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntClipMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entclipmetadata.FieldID)
		for _, f := range fields {
			if !entclipmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entclipmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecmuo.mutation.Filename(); ok {
		_spec.SetField(entclipmetadata.FieldFilename, field.TypeString, value)
	}
	if value, ok := ecmuo.mutation.FileURL(); ok {
		_spec.SetField(entclipmetadata.FieldFileURL, field.TypeString, value)
	}
	if value, ok := ecmuo.mutation.FileSize(); ok {
		_spec.SetField(entclipmetadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := ecmuo.mutation.AddedFileSize(); ok {
		_spec.AddField(entclipmetadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := ecmuo.mutation.Duration(); ok {
		_spec.SetField(entclipmetadata.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ecmuo.mutation.AddedDuration(); ok {
		_spec.AddField(entclipmetadata.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ecmuo.mutation.Format(); ok {
		_spec.SetField(entclipmetadata.FieldFormat, field.TypeString, value)
	}
	if value, ok := ecmuo.mutation.Word(); ok {
		_spec.SetField(entclipmetadata.FieldWord, field.TypeString, value)
	}
	if value, ok := ecmuo.mutation.Sentence(); ok {
		_spec.SetField(entclipmetadata.FieldSentence, field.TypeString, value)
	}
	if value, ok := ecmuo.mutation.Thumbnail(); ok {
		_spec.SetField(entclipmetadata.FieldThumbnail, field.TypeString, value)
	}
	_node = &EntClipMetadata{config: ecmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entclipmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecmuo.mutation.done = true
	return _node, nil
}
