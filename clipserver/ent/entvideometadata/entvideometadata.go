// Code generated by ent, DO NOT EDIT.

package entvideometadata

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the entvideometadata type in the database.
	Label = "ent_video_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// Table holds the table name of the entvideometadata in the database.
	Table = "ent_video_metadata"
)

// Columns holds all SQL columns for entvideometadata fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldFilename,
	FieldFileSize,
	FieldContentType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FileSizeValidator is a validator for the "file_size" field. It is called by the builders before save.
	FileSizeValidator func(int64) error
	// DefaultContentType holds the default value on creation for the "content_type" field.
	DefaultContentType string
)

// OrderOption defines the ordering options for the EntVideoMetadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}
