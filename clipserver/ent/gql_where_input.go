// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"com.gigaboo/clipserver/ent/entvideometadata"
	"com.gigaboo/clipserver/ent/predicate"
)

// EntClipMetadataWhereInput represents a where input for filtering EntClipMetadata queries.
type EntClipMetadataWhereInput struct {
	Predicates []predicate.EntClipMetadata  `json:"-"`
	Not        *EntClipMetadataWhereInput   `json:"not,omitempty"`
	Or         []*EntClipMetadataWhereInput `json:"or,omitempty"`
	And        []*EntClipMetadataWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "filename" field predicates.
	Filename             *string  `json:"filename,omitempty"`
	FilenameNEQ          *string  `json:"filenameNEQ,omitempty"`
	FilenameIn           []string `json:"filenameIn,omitempty"`
	FilenameNotIn        []string `json:"filenameNotIn,omitempty"`
	FilenameGT           *string  `json:"filenameGT,omitempty"`
	FilenameGTE          *string  `json:"filenameGTE,omitempty"`
	FilenameLT           *string  `json:"filenameLT,omitempty"`
	FilenameLTE          *string  `json:"filenameLTE,omitempty"`
	FilenameContains     *string  `json:"filenameContains,omitempty"`
	FilenameHasPrefix    *string  `json:"filenameHasPrefix,omitempty"`
	FilenameHasSuffix    *string  `json:"filenameHasSuffix,omitempty"`
	FilenameEqualFold    *string  `json:"filenameEqualFold,omitempty"`
	FilenameContainsFold *string  `json:"filenameContainsFold,omitempty"`

	// "file_url" field predicates.
	FileURL             *string  `json:"fileURL,omitempty"`
	FileURLNEQ          *string  `json:"fileURLNEQ,omitempty"`
	FileURLIn           []string `json:"fileURLIn,omitempty"`
	FileURLNotIn        []string `json:"fileURLNotIn,omitempty"`
	FileURLGT           *string  `json:"fileURLGT,omitempty"`
	FileURLGTE          *string  `json:"fileURLGTE,omitempty"`
	FileURLLT           *string  `json:"fileURLLT,omitempty"`
	FileURLLTE          *string  `json:"fileURLLTE,omitempty"`
	FileURLContains     *string  `json:"fileURLContains,omitempty"`
	FileURLHasPrefix    *string  `json:"fileURLHasPrefix,omitempty"`
	FileURLHasSuffix    *string  `json:"fileURLHasSuffix,omitempty"`
	FileURLEqualFold    *string  `json:"fileURLEqualFold,omitempty"`
	FileURLContainsFold *string  `json:"fileURLContainsFold,omitempty"`

	// "file_size" field predicates.
	FileSize      *int64  `json:"fileSize,omitempty"`
	FileSizeNEQ   *int64  `json:"fileSizeNEQ,omitempty"`
	FileSizeIn    []int64 `json:"fileSizeIn,omitempty"`
	FileSizeNotIn []int64 `json:"fileSizeNotIn,omitempty"`
	FileSizeGT    *int64  `json:"fileSizeGT,omitempty"`
	FileSizeGTE   *int64  `json:"fileSizeGTE,omitempty"`
	FileSizeLT    *int64  `json:"fileSizeLT,omitempty"`
	FileSizeLTE   *int64  `json:"fileSizeLTE,omitempty"`

	// "duration" field predicates.
	Duration      *int  `json:"duration,omitempty"`
	DurationNEQ   *int  `json:"durationNEQ,omitempty"`
	DurationIn    []int `json:"durationIn,omitempty"`
	DurationNotIn []int `json:"durationNotIn,omitempty"`
	DurationGT    *int  `json:"durationGT,omitempty"`
	DurationGTE   *int  `json:"durationGTE,omitempty"`
	DurationLT    *int  `json:"durationLT,omitempty"`
	DurationLTE   *int  `json:"durationLTE,omitempty"`

	// "format" field predicates.
	Format             *string  `json:"format,omitempty"`
	FormatNEQ          *string  `json:"formatNEQ,omitempty"`
	FormatIn           []string `json:"formatIn,omitempty"`
	FormatNotIn        []string `json:"formatNotIn,omitempty"`
	FormatGT           *string  `json:"formatGT,omitempty"`
	FormatGTE          *string  `json:"formatGTE,omitempty"`
	FormatLT           *string  `json:"formatLT,omitempty"`
	FormatLTE          *string  `json:"formatLTE,omitempty"`
	FormatContains     *string  `json:"formatContains,omitempty"`
	FormatHasPrefix    *string  `json:"formatHasPrefix,omitempty"`
	FormatHasSuffix    *string  `json:"formatHasSuffix,omitempty"`
	FormatEqualFold    *string  `json:"formatEqualFold,omitempty"`
	FormatContainsFold *string  `json:"formatContainsFold,omitempty"`

	// "word" field predicates.
	Word             *string  `json:"word,omitempty"`
	WordNEQ          *string  `json:"wordNEQ,omitempty"`
	WordIn           []string `json:"wordIn,omitempty"`
	WordNotIn        []string `json:"wordNotIn,omitempty"`
	WordGT           *string  `json:"wordGT,omitempty"`
	WordGTE          *string  `json:"wordGTE,omitempty"`
	WordLT           *string  `json:"wordLT,omitempty"`
	WordLTE          *string  `json:"wordLTE,omitempty"`
	WordContains     *string  `json:"wordContains,omitempty"`
	WordHasPrefix    *string  `json:"wordHasPrefix,omitempty"`
	WordHasSuffix    *string  `json:"wordHasSuffix,omitempty"`
	WordEqualFold    *string  `json:"wordEqualFold,omitempty"`
	WordContainsFold *string  `json:"wordContainsFold,omitempty"`

	// "sentence" field predicates.
	Sentence             *string  `json:"sentence,omitempty"`
	SentenceNEQ          *string  `json:"sentenceNEQ,omitempty"`
	SentenceIn           []string `json:"sentenceIn,omitempty"`
	SentenceNotIn        []string `json:"sentenceNotIn,omitempty"`
	SentenceGT           *string  `json:"sentenceGT,omitempty"`
	SentenceGTE          *string  `json:"sentenceGTE,omitempty"`
	SentenceLT           *string  `json:"sentenceLT,omitempty"`
	SentenceLTE          *string  `json:"sentenceLTE,omitempty"`
	SentenceContains     *string  `json:"sentenceContains,omitempty"`
	SentenceHasPrefix    *string  `json:"sentenceHasPrefix,omitempty"`
	SentenceHasSuffix    *string  `json:"sentenceHasSuffix,omitempty"`
	SentenceEqualFold    *string  `json:"sentenceEqualFold,omitempty"`
	SentenceContainsFold *string  `json:"sentenceContainsFold,omitempty"`

	// "thumbnail" field predicates.
	Thumbnail             *string  `json:"thumbnail,omitempty"`
	ThumbnailNEQ          *string  `json:"thumbnailNEQ,omitempty"`
	ThumbnailIn           []string `json:"thumbnailIn,omitempty"`
	ThumbnailNotIn        []string `json:"thumbnailNotIn,omitempty"`
	ThumbnailGT           *string  `json:"thumbnailGT,omitempty"`
	ThumbnailGTE          *string  `json:"thumbnailGTE,omitempty"`
	ThumbnailLT           *string  `json:"thumbnailLT,omitempty"`
	ThumbnailLTE          *string  `json:"thumbnailLTE,omitempty"`
	ThumbnailContains     *string  `json:"thumbnailContains,omitempty"`
	ThumbnailHasPrefix    *string  `json:"thumbnailHasPrefix,omitempty"`
	ThumbnailHasSuffix    *string  `json:"thumbnailHasSuffix,omitempty"`
	ThumbnailEqualFold    *string  `json:"thumbnailEqualFold,omitempty"`
	ThumbnailContainsFold *string  `json:"thumbnailContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntClipMetadataWhereInput) AddPredicates(predicates ...predicate.EntClipMetadata) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntClipMetadataWhereInput filter on the EntClipMetadataQuery builder.
func (i *EntClipMetadataWhereInput) Filter(q *EntClipMetadataQuery) (*EntClipMetadataQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntClipMetadataWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntClipMetadataWhereInput is returned in case the EntClipMetadataWhereInput is empty.
var ErrEmptyEntClipMetadataWhereInput = errors.New("ent: empty predicate EntClipMetadataWhereInput")

// P returns a predicate for filtering entclipmetadataslice.
// An error is returned if the input is empty or invalid.
func (i *EntClipMetadataWhereInput) P() (predicate.EntClipMetadata, error) {
	var predicates []predicate.EntClipMetadata
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entclipmetadata.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntClipMetadata, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entclipmetadata.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntClipMetadata, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entclipmetadata.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entclipmetadata.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entclipmetadata.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entclipmetadata.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entclipmetadata.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entclipmetadata.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entclipmetadata.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entclipmetadata.IDLTE(*i.IDLTE))
	}
	if i.Filename != nil {
		predicates = append(predicates, entclipmetadata.FilenameEQ(*i.Filename))
	}
	if i.FilenameNEQ != nil {
		predicates = append(predicates, entclipmetadata.FilenameNEQ(*i.FilenameNEQ))
	}
	if len(i.FilenameIn) > 0 {
		predicates = append(predicates, entclipmetadata.FilenameIn(i.FilenameIn...))
	}
	if len(i.FilenameNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.FilenameNotIn(i.FilenameNotIn...))
	}
	if i.FilenameGT != nil {
		predicates = append(predicates, entclipmetadata.FilenameGT(*i.FilenameGT))
	}
	if i.FilenameGTE != nil {
		predicates = append(predicates, entclipmetadata.FilenameGTE(*i.FilenameGTE))
	}
	if i.FilenameLT != nil {
		predicates = append(predicates, entclipmetadata.FilenameLT(*i.FilenameLT))
	}
	if i.FilenameLTE != nil {
		predicates = append(predicates, entclipmetadata.FilenameLTE(*i.FilenameLTE))
	}
	if i.FilenameContains != nil {
		predicates = append(predicates, entclipmetadata.FilenameContains(*i.FilenameContains))
	}
	if i.FilenameHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.FilenameHasPrefix(*i.FilenameHasPrefix))
	}
	if i.FilenameHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.FilenameHasSuffix(*i.FilenameHasSuffix))
	}
	if i.FilenameEqualFold != nil {
		predicates = append(predicates, entclipmetadata.FilenameEqualFold(*i.FilenameEqualFold))
	}
	if i.FilenameContainsFold != nil {
		predicates = append(predicates, entclipmetadata.FilenameContainsFold(*i.FilenameContainsFold))
	}
	if i.FileURL != nil {
		predicates = append(predicates, entclipmetadata.FileURLEQ(*i.FileURL))
	}
	if i.FileURLNEQ != nil {
		predicates = append(predicates, entclipmetadata.FileURLNEQ(*i.FileURLNEQ))
	}
	if len(i.FileURLIn) > 0 {
		predicates = append(predicates, entclipmetadata.FileURLIn(i.FileURLIn...))
	}
	if len(i.FileURLNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.FileURLNotIn(i.FileURLNotIn...))
	}
	if i.FileURLGT != nil {
		predicates = append(predicates, entclipmetadata.FileURLGT(*i.FileURLGT))
	}
	if i.FileURLGTE != nil {
		predicates = append(predicates, entclipmetadata.FileURLGTE(*i.FileURLGTE))
	}
	if i.FileURLLT != nil {
		predicates = append(predicates, entclipmetadata.FileURLLT(*i.FileURLLT))
	}
	if i.FileURLLTE != nil {
		predicates = append(predicates, entclipmetadata.FileURLLTE(*i.FileURLLTE))
	}
	if i.FileURLContains != nil {
		predicates = append(predicates, entclipmetadata.FileURLContains(*i.FileURLContains))
	}
	if i.FileURLHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.FileURLHasPrefix(*i.FileURLHasPrefix))
	}
	if i.FileURLHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.FileURLHasSuffix(*i.FileURLHasSuffix))
	}
	if i.FileURLEqualFold != nil {
		predicates = append(predicates, entclipmetadata.FileURLEqualFold(*i.FileURLEqualFold))
	}
	if i.FileURLContainsFold != nil {
		predicates = append(predicates, entclipmetadata.FileURLContainsFold(*i.FileURLContainsFold))
	}
	if i.FileSize != nil {
		predicates = append(predicates, entclipmetadata.FileSizeEQ(*i.FileSize))
	}
	if i.FileSizeNEQ != nil {
		predicates = append(predicates, entclipmetadata.FileSizeNEQ(*i.FileSizeNEQ))
	}
	if len(i.FileSizeIn) > 0 {
		predicates = append(predicates, entclipmetadata.FileSizeIn(i.FileSizeIn...))
	}
	if len(i.FileSizeNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.FileSizeNotIn(i.FileSizeNotIn...))
	}
	if i.FileSizeGT != nil {
		predicates = append(predicates, entclipmetadata.FileSizeGT(*i.FileSizeGT))
	}
	if i.FileSizeGTE != nil {
		predicates = append(predicates, entclipmetadata.FileSizeGTE(*i.FileSizeGTE))
	}
	if i.FileSizeLT != nil {
		predicates = append(predicates, entclipmetadata.FileSizeLT(*i.FileSizeLT))
	}
	if i.FileSizeLTE != nil {
		predicates = append(predicates, entclipmetadata.FileSizeLTE(*i.FileSizeLTE))
	}
	if i.Duration != nil {
		predicates = append(predicates, entclipmetadata.DurationEQ(*i.Duration))
	}
	if i.DurationNEQ != nil {
		predicates = append(predicates, entclipmetadata.DurationNEQ(*i.DurationNEQ))
	}
	if len(i.DurationIn) > 0 {
		predicates = append(predicates, entclipmetadata.DurationIn(i.DurationIn...))
	}
	if len(i.DurationNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.DurationNotIn(i.DurationNotIn...))
	}
	if i.DurationGT != nil {
		predicates = append(predicates, entclipmetadata.DurationGT(*i.DurationGT))
	}
	if i.DurationGTE != nil {
		predicates = append(predicates, entclipmetadata.DurationGTE(*i.DurationGTE))
	}
	if i.DurationLT != nil {
		predicates = append(predicates, entclipmetadata.DurationLT(*i.DurationLT))
	}
	if i.DurationLTE != nil {
		predicates = append(predicates, entclipmetadata.DurationLTE(*i.DurationLTE))
	}
	if i.Format != nil {
		predicates = append(predicates, entclipmetadata.FormatEQ(*i.Format))
	}
	if i.FormatNEQ != nil {
		predicates = append(predicates, entclipmetadata.FormatNEQ(*i.FormatNEQ))
	}
	if len(i.FormatIn) > 0 {
		predicates = append(predicates, entclipmetadata.FormatIn(i.FormatIn...))
	}
	if len(i.FormatNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.FormatNotIn(i.FormatNotIn...))
	}
	if i.FormatGT != nil {
		predicates = append(predicates, entclipmetadata.FormatGT(*i.FormatGT))
	}
	if i.FormatGTE != nil {
		predicates = append(predicates, entclipmetadata.FormatGTE(*i.FormatGTE))
	}
	if i.FormatLT != nil {
		predicates = append(predicates, entclipmetadata.FormatLT(*i.FormatLT))
	}
	if i.FormatLTE != nil {
		predicates = append(predicates, entclipmetadata.FormatLTE(*i.FormatLTE))
	}
	if i.FormatContains != nil {
		predicates = append(predicates, entclipmetadata.FormatContains(*i.FormatContains))
	}
	if i.FormatHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.FormatHasPrefix(*i.FormatHasPrefix))
	}
	if i.FormatHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.FormatHasSuffix(*i.FormatHasSuffix))
	}
	if i.FormatEqualFold != nil {
		predicates = append(predicates, entclipmetadata.FormatEqualFold(*i.FormatEqualFold))
	}
	if i.FormatContainsFold != nil {
		predicates = append(predicates, entclipmetadata.FormatContainsFold(*i.FormatContainsFold))
	}
	if i.Word != nil {
		predicates = append(predicates, entclipmetadata.WordEQ(*i.Word))
	}
	if i.WordNEQ != nil {
		predicates = append(predicates, entclipmetadata.WordNEQ(*i.WordNEQ))
	}
	if len(i.WordIn) > 0 {
		predicates = append(predicates, entclipmetadata.WordIn(i.WordIn...))
	}
	if len(i.WordNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.WordNotIn(i.WordNotIn...))
	}
	if i.WordGT != nil {
		predicates = append(predicates, entclipmetadata.WordGT(*i.WordGT))
	}
	if i.WordGTE != nil {
		predicates = append(predicates, entclipmetadata.WordGTE(*i.WordGTE))
	}
	if i.WordLT != nil {
		predicates = append(predicates, entclipmetadata.WordLT(*i.WordLT))
	}
	if i.WordLTE != nil {
		predicates = append(predicates, entclipmetadata.WordLTE(*i.WordLTE))
	}
	if i.WordContains != nil {
		predicates = append(predicates, entclipmetadata.WordContains(*i.WordContains))
	}
	if i.WordHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.WordHasPrefix(*i.WordHasPrefix))
	}
	if i.WordHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.WordHasSuffix(*i.WordHasSuffix))
	}
	if i.WordEqualFold != nil {
		predicates = append(predicates, entclipmetadata.WordEqualFold(*i.WordEqualFold))
	}
	if i.WordContainsFold != nil {
		predicates = append(predicates, entclipmetadata.WordContainsFold(*i.WordContainsFold))
	}
	if i.Sentence != nil {
		predicates = append(predicates, entclipmetadata.SentenceEQ(*i.Sentence))
	}
	if i.SentenceNEQ != nil {
		predicates = append(predicates, entclipmetadata.SentenceNEQ(*i.SentenceNEQ))
	}
	if len(i.SentenceIn) > 0 {
		predicates = append(predicates, entclipmetadata.SentenceIn(i.SentenceIn...))
	}
	if len(i.SentenceNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.SentenceNotIn(i.SentenceNotIn...))
	}
	if i.SentenceGT != nil {
		predicates = append(predicates, entclipmetadata.SentenceGT(*i.SentenceGT))
	}
	if i.SentenceGTE != nil {
		predicates = append(predicates, entclipmetadata.SentenceGTE(*i.SentenceGTE))
	}
	if i.SentenceLT != nil {
		predicates = append(predicates, entclipmetadata.SentenceLT(*i.SentenceLT))
	}
	if i.SentenceLTE != nil {
		predicates = append(predicates, entclipmetadata.SentenceLTE(*i.SentenceLTE))
	}
	if i.SentenceContains != nil {
		predicates = append(predicates, entclipmetadata.SentenceContains(*i.SentenceContains))
	}
	if i.SentenceHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.SentenceHasPrefix(*i.SentenceHasPrefix))
	}
	if i.SentenceHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.SentenceHasSuffix(*i.SentenceHasSuffix))
	}
	if i.SentenceEqualFold != nil {
		predicates = append(predicates, entclipmetadata.SentenceEqualFold(*i.SentenceEqualFold))
	}
	if i.SentenceContainsFold != nil {
		predicates = append(predicates, entclipmetadata.SentenceContainsFold(*i.SentenceContainsFold))
	}
	if i.Thumbnail != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailEQ(*i.Thumbnail))
	}
	if i.ThumbnailNEQ != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailNEQ(*i.ThumbnailNEQ))
	}
	if len(i.ThumbnailIn) > 0 {
		predicates = append(predicates, entclipmetadata.ThumbnailIn(i.ThumbnailIn...))
	}
	if len(i.ThumbnailNotIn) > 0 {
		predicates = append(predicates, entclipmetadata.ThumbnailNotIn(i.ThumbnailNotIn...))
	}
	if i.ThumbnailGT != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailGT(*i.ThumbnailGT))
	}
	if i.ThumbnailGTE != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailGTE(*i.ThumbnailGTE))
	}
	if i.ThumbnailLT != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailLT(*i.ThumbnailLT))
	}
	if i.ThumbnailLTE != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailLTE(*i.ThumbnailLTE))
	}
	if i.ThumbnailContains != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailContains(*i.ThumbnailContains))
	}
	if i.ThumbnailHasPrefix != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailHasPrefix(*i.ThumbnailHasPrefix))
	}
	if i.ThumbnailHasSuffix != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailHasSuffix(*i.ThumbnailHasSuffix))
	}
	if i.ThumbnailEqualFold != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailEqualFold(*i.ThumbnailEqualFold))
	}
	if i.ThumbnailContainsFold != nil {
		predicates = append(predicates, entclipmetadata.ThumbnailContainsFold(*i.ThumbnailContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntClipMetadataWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entclipmetadata.And(predicates...), nil
	}
}

// EntVideoMetadataWhereInput represents a where input for filtering EntVideoMetadata queries.
type EntVideoMetadataWhereInput struct {
	Predicates []predicate.EntVideoMetadata  `json:"-"`
	Not        *EntVideoMetadataWhereInput   `json:"not,omitempty"`
	Or         []*EntVideoMetadataWhereInput `json:"or,omitempty"`
	And        []*EntVideoMetadataWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "url" field predicates.
	URL             *string  `json:"url,omitempty"`
	URLNEQ          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGT           *string  `json:"urlGT,omitempty"`
	URLGTE          *string  `json:"urlGTE,omitempty"`
	URLLT           *string  `json:"urlLT,omitempty"`
	URLLTE          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`

	// "filename" field predicates.
	Filename             *string  `json:"filename,omitempty"`
	FilenameNEQ          *string  `json:"filenameNEQ,omitempty"`
	FilenameIn           []string `json:"filenameIn,omitempty"`
	FilenameNotIn        []string `json:"filenameNotIn,omitempty"`
	FilenameGT           *string  `json:"filenameGT,omitempty"`
	FilenameGTE          *string  `json:"filenameGTE,omitempty"`
	FilenameLT           *string  `json:"filenameLT,omitempty"`
	FilenameLTE          *string  `json:"filenameLTE,omitempty"`
	FilenameContains     *string  `json:"filenameContains,omitempty"`
	FilenameHasPrefix    *string  `json:"filenameHasPrefix,omitempty"`
	FilenameHasSuffix    *string  `json:"filenameHasSuffix,omitempty"`
	FilenameEqualFold    *string  `json:"filenameEqualFold,omitempty"`
	FilenameContainsFold *string  `json:"filenameContainsFold,omitempty"`

	// "file_size" field predicates.
	FileSize      *int64  `json:"fileSize,omitempty"`
	FileSizeNEQ   *int64  `json:"fileSizeNEQ,omitempty"`
	FileSizeIn    []int64 `json:"fileSizeIn,omitempty"`
	FileSizeNotIn []int64 `json:"fileSizeNotIn,omitempty"`
	FileSizeGT    *int64  `json:"fileSizeGT,omitempty"`
	FileSizeGTE   *int64  `json:"fileSizeGTE,omitempty"`
	FileSizeLT    *int64  `json:"fileSizeLT,omitempty"`
	FileSizeLTE   *int64  `json:"fileSizeLTE,omitempty"`

	// "content_type" field predicates.
	ContentType             *string  `json:"contentType,omitempty"`
	ContentTypeNEQ          *string  `json:"contentTypeNEQ,omitempty"`
	ContentTypeIn           []string `json:"contentTypeIn,omitempty"`
	ContentTypeNotIn        []string `json:"contentTypeNotIn,omitempty"`
	ContentTypeGT           *string  `json:"contentTypeGT,omitempty"`
	ContentTypeGTE          *string  `json:"contentTypeGTE,omitempty"`
	ContentTypeLT           *string  `json:"contentTypeLT,omitempty"`
	ContentTypeLTE          *string  `json:"contentTypeLTE,omitempty"`
	ContentTypeContains     *string  `json:"contentTypeContains,omitempty"`
	ContentTypeHasPrefix    *string  `json:"contentTypeHasPrefix,omitempty"`
	ContentTypeHasSuffix    *string  `json:"contentTypeHasSuffix,omitempty"`
	ContentTypeEqualFold    *string  `json:"contentTypeEqualFold,omitempty"`
	ContentTypeContainsFold *string  `json:"contentTypeContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntVideoMetadataWhereInput) AddPredicates(predicates ...predicate.EntVideoMetadata) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntVideoMetadataWhereInput filter on the EntVideoMetadataQuery builder.
func (i *EntVideoMetadataWhereInput) Filter(q *EntVideoMetadataQuery) (*EntVideoMetadataQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntVideoMetadataWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntVideoMetadataWhereInput is returned in case the EntVideoMetadataWhereInput is empty.
var ErrEmptyEntVideoMetadataWhereInput = errors.New("ent: empty predicate EntVideoMetadataWhereInput")

// P returns a predicate for filtering entvideometadataslice.
// An error is returned if the input is empty or invalid.
func (i *EntVideoMetadataWhereInput) P() (predicate.EntVideoMetadata, error) {
	var predicates []predicate.EntVideoMetadata
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entvideometadata.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntVideoMetadata, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entvideometadata.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntVideoMetadata, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entvideometadata.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entvideometadata.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entvideometadata.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entvideometadata.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entvideometadata.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entvideometadata.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entvideometadata.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entvideometadata.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entvideometadata.IDLTE(*i.IDLTE))
	}
	if i.URL != nil {
		predicates = append(predicates, entvideometadata.URLEQ(*i.URL))
	}
	if i.URLNEQ != nil {
		predicates = append(predicates, entvideometadata.URLNEQ(*i.URLNEQ))
	}
	if len(i.URLIn) > 0 {
		predicates = append(predicates, entvideometadata.URLIn(i.URLIn...))
	}
	if len(i.URLNotIn) > 0 {
		predicates = append(predicates, entvideometadata.URLNotIn(i.URLNotIn...))
	}
	if i.URLGT != nil {
		predicates = append(predicates, entvideometadata.URLGT(*i.URLGT))
	}
	if i.URLGTE != nil {
		predicates = append(predicates, entvideometadata.URLGTE(*i.URLGTE))
	}
	if i.URLLT != nil {
		predicates = append(predicates, entvideometadata.URLLT(*i.URLLT))
	}
	if i.URLLTE != nil {
		predicates = append(predicates, entvideometadata.URLLTE(*i.URLLTE))
	}
	if i.URLContains != nil {
		predicates = append(predicates, entvideometadata.URLContains(*i.URLContains))
	}
	if i.URLHasPrefix != nil {
		predicates = append(predicates, entvideometadata.URLHasPrefix(*i.URLHasPrefix))
	}
	if i.URLHasSuffix != nil {
		predicates = append(predicates, entvideometadata.URLHasSuffix(*i.URLHasSuffix))
	}
	if i.URLEqualFold != nil {
		predicates = append(predicates, entvideometadata.URLEqualFold(*i.URLEqualFold))
	}
	if i.URLContainsFold != nil {
		predicates = append(predicates, entvideometadata.URLContainsFold(*i.URLContainsFold))
	}
	if i.Filename != nil {
		predicates = append(predicates, entvideometadata.FilenameEQ(*i.Filename))
	}
	if i.FilenameNEQ != nil {
		predicates = append(predicates, entvideometadata.FilenameNEQ(*i.FilenameNEQ))
	}
	if len(i.FilenameIn) > 0 {
		predicates = append(predicates, entvideometadata.FilenameIn(i.FilenameIn...))
	}
	if len(i.FilenameNotIn) > 0 {
		predicates = append(predicates, entvideometadata.FilenameNotIn(i.FilenameNotIn...))
	}
	if i.FilenameGT != nil {
		predicates = append(predicates, entvideometadata.FilenameGT(*i.FilenameGT))
	}
	if i.FilenameGTE != nil {
		predicates = append(predicates, entvideometadata.FilenameGTE(*i.FilenameGTE))
	}
	if i.FilenameLT != nil {
		predicates = append(predicates, entvideometadata.FilenameLT(*i.FilenameLT))
	}
	if i.FilenameLTE != nil {
		predicates = append(predicates, entvideometadata.FilenameLTE(*i.FilenameLTE))
	}
	if i.FilenameContains != nil {
		predicates = append(predicates, entvideometadata.FilenameContains(*i.FilenameContains))
	}
	if i.FilenameHasPrefix != nil {
		predicates = append(predicates, entvideometadata.FilenameHasPrefix(*i.FilenameHasPrefix))
	}
	if i.FilenameHasSuffix != nil {
		predicates = append(predicates, entvideometadata.FilenameHasSuffix(*i.FilenameHasSuffix))
	}
	if i.FilenameEqualFold != nil {
		predicates = append(predicates, entvideometadata.FilenameEqualFold(*i.FilenameEqualFold))
	}
	if i.FilenameContainsFold != nil {
		predicates = append(predicates, entvideometadata.FilenameContainsFold(*i.FilenameContainsFold))
	}
	if i.FileSize != nil {
		predicates = append(predicates, entvideometadata.FileSizeEQ(*i.FileSize))
	}
	if i.FileSizeNEQ != nil {
		predicates = append(predicates, entvideometadata.FileSizeNEQ(*i.FileSizeNEQ))
	}
	if len(i.FileSizeIn) > 0 {
		predicates = append(predicates, entvideometadata.FileSizeIn(i.FileSizeIn...))
	}
	if len(i.FileSizeNotIn) > 0 {
		predicates = append(predicates, entvideometadata.FileSizeNotIn(i.FileSizeNotIn...))
	}
	if i.FileSizeGT != nil {
		predicates = append(predicates, entvideometadata.FileSizeGT(*i.FileSizeGT))
	}
	if i.FileSizeGTE != nil {
		predicates = append(predicates, entvideometadata.FileSizeGTE(*i.FileSizeGTE))
	}
	if i.FileSizeLT != nil {
		predicates = append(predicates, entvideometadata.FileSizeLT(*i.FileSizeLT))
	}
	if i.FileSizeLTE != nil {
		predicates = append(predicates, entvideometadata.FileSizeLTE(*i.FileSizeLTE))
	}
	if i.ContentType != nil {
		predicates = append(predicates, entvideometadata.ContentTypeEQ(*i.ContentType))
	}
	if i.ContentTypeNEQ != nil {
		predicates = append(predicates, entvideometadata.ContentTypeNEQ(*i.ContentTypeNEQ))
	}
	if len(i.ContentTypeIn) > 0 {
		predicates = append(predicates, entvideometadata.ContentTypeIn(i.ContentTypeIn...))
	}
	if len(i.ContentTypeNotIn) > 0 {
		predicates = append(predicates, entvideometadata.ContentTypeNotIn(i.ContentTypeNotIn...))
	}
	if i.ContentTypeGT != nil {
		predicates = append(predicates, entvideometadata.ContentTypeGT(*i.ContentTypeGT))
	}
	if i.ContentTypeGTE != nil {
		predicates = append(predicates, entvideometadata.ContentTypeGTE(*i.ContentTypeGTE))
	}
	if i.ContentTypeLT != nil {
		predicates = append(predicates, entvideometadata.ContentTypeLT(*i.ContentTypeLT))
	}
	if i.ContentTypeLTE != nil {
		predicates = append(predicates, entvideometadata.ContentTypeLTE(*i.ContentTypeLTE))
	}
	if i.ContentTypeContains != nil {
		predicates = append(predicates, entvideometadata.ContentTypeContains(*i.ContentTypeContains))
	}
	if i.ContentTypeHasPrefix != nil {
		predicates = append(predicates, entvideometadata.ContentTypeHasPrefix(*i.ContentTypeHasPrefix))
	}
	if i.ContentTypeHasSuffix != nil {
		predicates = append(predicates, entvideometadata.ContentTypeHasSuffix(*i.ContentTypeHasSuffix))
	}
	if i.ContentTypeEqualFold != nil {
		predicates = append(predicates, entvideometadata.ContentTypeEqualFold(*i.ContentTypeEqualFold))
	}
	if i.ContentTypeContainsFold != nil {
		predicates = append(predicates, entvideometadata.ContentTypeContainsFold(*i.ContentTypeContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntVideoMetadataWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entvideometadata.And(predicates...), nil
	}
}
