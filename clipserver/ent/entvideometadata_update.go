// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"com.gigaboo/clipserver/ent/entvideometadata"
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntVideoMetadataUpdate is the builder for updating EntVideoMetadata entities.
type EntVideoMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *EntVideoMetadataMutation
}

// Where appends a list predicates to the EntVideoMetadataUpdate builder.
func (evmu *EntVideoMetadataUpdate) Where(ps ...predicate.EntVideoMetadata) *EntVideoMetadataUpdate {
	evmu.mutation.Where(ps...)
	return evmu
}

// SetURL sets the "url" field.
func (evmu *EntVideoMetadataUpdate) SetURL(s string) *EntVideoMetadataUpdate {
	evmu.mutation.SetURL(s)
	return evmu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (evmu *EntVideoMetadataUpdate) SetNillableURL(s *string) *EntVideoMetadataUpdate {
	if s != nil {
		evmu.SetURL(*s)
	}
	return evmu
}

// SetFilename sets the "filename" field.
func (evmu *EntVideoMetadataUpdate) SetFilename(s string) *EntVideoMetadataUpdate {
	evmu.mutation.SetFilename(s)
	return evmu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (evmu *EntVideoMetadataUpdate) SetNillableFilename(s *string) *EntVideoMetadataUpdate {
	if s != nil {
		evmu.SetFilename(*s)
	}
	return evmu
}

// SetFileSize sets the "file_size" field.
func (evmu *EntVideoMetadataUpdate) SetFileSize(i int64) *EntVideoMetadataUpdate {
	evmu.mutation.ResetFileSize()
	evmu.mutation.SetFileSize(i)
	return evmu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (evmu *EntVideoMetadataUpdate) SetNillableFileSize(i *int64) *EntVideoMetadataUpdate {
	if i != nil {
		evmu.SetFileSize(*i)
	}
	return evmu
}

// AddFileSize adds i to the "file_size" field.
func (evmu *EntVideoMetadataUpdate) AddFileSize(i int64) *EntVideoMetadataUpdate {
	evmu.mutation.AddFileSize(i)
	return evmu
}

// SetContentType sets the "content_type" field.
func (evmu *EntVideoMetadataUpdate) SetContentType(s string) *EntVideoMetadataUpdate {
	evmu.mutation.SetContentType(s)
	return evmu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (evmu *EntVideoMetadataUpdate) SetNillableContentType(s *string) *EntVideoMetadataUpdate {
	if s != nil {
		evmu.SetContentType(*s)
	}
	return evmu
}

// Mutation returns the EntVideoMetadataMutation object of the builder.
func (evmu *EntVideoMetadataUpdate) Mutation() *EntVideoMetadataMutation {
	return evmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evmu *EntVideoMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, evmu.sqlSave, evmu.mutation, evmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evmu *EntVideoMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := evmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evmu *EntVideoMetadataUpdate) Exec(ctx context.Context) error {
	_, err := evmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evmu *EntVideoMetadataUpdate) ExecX(ctx context.Context) {
	if err := evmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evmu *EntVideoMetadataUpdate) check() error {
	if v, ok := evmu.mutation.FileSize(); ok {
		if err := entvideometadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntVideoMetadata.file_size": %w`, err)}
		}
	}
	return nil
}

func (evmu *EntVideoMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := evmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entvideometadata.Table, entvideometadata.Columns, sqlgraph.NewFieldSpec(entvideometadata.FieldID, field.TypeInt))
	if ps := evmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evmu.mutation.URL(); ok {
		_spec.SetField(entvideometadata.FieldURL, field.TypeString, value)
	}
	if value, ok := evmu.mutation.Filename(); ok {
		_spec.SetField(entvideometadata.FieldFilename, field.TypeString, value)
	}
	if value, ok := evmu.mutation.FileSize(); ok {
		_spec.SetField(entvideometadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := evmu.mutation.AddedFileSize(); ok {
		_spec.AddField(entvideometadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := evmu.mutation.ContentType(); ok {
		_spec.SetField(entvideometadata.FieldContentType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, evmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entvideometadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evmu.mutation.done = true
	return n, nil
}

// EntVideoMetadataUpdateOne is the builder for updating a single EntVideoMetadata entity.
type EntVideoMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntVideoMetadataMutation
}

// SetURL sets the "url" field.
func (evmuo *EntVideoMetadataUpdateOne) SetURL(s string) *EntVideoMetadataUpdateOne {
	evmuo.mutation.SetURL(s)
	return evmuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (evmuo *EntVideoMetadataUpdateOne) SetNillableURL(s *string) *EntVideoMetadataUpdateOne {
	if s != nil {
		evmuo.SetURL(*s)
	}
	return evmuo
}

// SetFilename sets the "filename" field.
func (evmuo *EntVideoMetadataUpdateOne) SetFilename(s string) *EntVideoMetadataUpdateOne {
	evmuo.mutation.SetFilename(s)
	return evmuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (evmuo *EntVideoMetadataUpdateOne) SetNillableFilename(s *string) *EntVideoMetadataUpdateOne {
	if s != nil {
		evmuo.SetFilename(*s)
	}
	return evmuo
}

// SetFileSize sets the "file_size" field.
func (evmuo *EntVideoMetadataUpdateOne) SetFileSize(i int64) *EntVideoMetadataUpdateOne {
	evmuo.mutation.ResetFileSize()
	evmuo.mutation.SetFileSize(i)
	return evmuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (evmuo *EntVideoMetadataUpdateOne) SetNillableFileSize(i *int64) *EntVideoMetadataUpdateOne {
	if i != nil {
		evmuo.SetFileSize(*i)
	}
	return evmuo
}

// AddFileSize adds i to the "file_size" field.
func (evmuo *EntVideoMetadataUpdateOne) AddFileSize(i int64) *EntVideoMetadataUpdateOne {
	evmuo.mutation.AddFileSize(i)
	return evmuo
}

// SetContentType sets the "content_type" field.
func (evmuo *EntVideoMetadataUpdateOne) SetContentType(s string) *EntVideoMetadataUpdateOne {
	evmuo.mutation.SetContentType(s)
	return evmuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (evmuo *EntVideoMetadataUpdateOne) SetNillableContentType(s *string) *EntVideoMetadataUpdateOne {
	if s != nil {
		evmuo.SetContentType(*s)
	}
	return evmuo
}

// Mutation returns the EntVideoMetadataMutation object of the builder.
func (evmuo *EntVideoMetadataUpdateOne) Mutation() *EntVideoMetadataMutation {
	return evmuo.mutation
}

// Where appends a list predicates to the EntVideoMetadataUpdate builder.
func (evmuo *EntVideoMetadataUpdateOne) Where(ps ...predicate.EntVideoMetadata) *EntVideoMetadataUpdateOne {
	evmuo.mutation.Where(ps...)
	return evmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evmuo *EntVideoMetadataUpdateOne) Select(field string, fields ...string) *EntVideoMetadataUpdateOne {
	evmuo.fields = append([]string{field}, fields...)
	return evmuo
}

// Save executes the query and returns the updated EntVideoMetadata entity.
func (evmuo *EntVideoMetadataUpdateOne) Save(ctx context.Context) (*EntVideoMetadata, error) {
	return withHooks(ctx, evmuo.sqlSave, evmuo.mutation, evmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evmuo *EntVideoMetadataUpdateOne) SaveX(ctx context.Context) *EntVideoMetadata {
	node, err := evmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evmuo *EntVideoMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := evmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evmuo *EntVideoMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := evmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evmuo *EntVideoMetadataUpdateOne) check() error {
	if v, ok := evmuo.mutation.FileSize(); ok {
		if err := entvideometadata.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "EntVideoMetadata.file_size": %w`, err)}
		}
	}
	return nil
}

func (evmuo *EntVideoMetadataUpdateOne) sqlSave(ctx context.Context) (_node *EntVideoMetadata, err error) {
	if err := evmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entvideometadata.Table, entvideometadata.Columns, sqlgraph.NewFieldSpec(entvideometadata.FieldID, field.TypeInt))
	id, ok := evmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntVideoMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entvideometadata.FieldID)
		for _, f := range fields {
			if !entvideometadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entvideometadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evmuo.mutation.URL(); ok {
		_spec.SetField(entvideometadata.FieldURL, field.TypeString, value)
	}
	if value, ok := evmuo.mutation.Filename(); ok {
		_spec.SetField(entvideometadata.FieldFilename, field.TypeString, value)
	}
	if value, ok := evmuo.mutation.FileSize(); ok {
		_spec.SetField(entvideometadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := evmuo.mutation.AddedFileSize(); ok {
		_spec.AddField(entvideometadata.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := evmuo.mutation.ContentType(); ok {
		_spec.SetField(entvideometadata.FieldContentType, field.TypeString, value)
	}
	_node = &EntVideoMetadata{config: evmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entvideometadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evmuo.mutation.done = true
	return _node, nil
}
