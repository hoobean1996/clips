// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"com.gigaboo/clipserver/ent/entvideometadata"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EntVideoMetadata is the model entity for the EntVideoMetadata schema.
type EntVideoMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 视频原始地址
	URL string `json:"url,omitempty"`
	// 原始文件名
	Filename string `json:"filename,omitempty"`
	// 文件大小(字节)
	FileSize int64 `json:"file_size,omitempty"`
	// 文件MIME类型
	ContentType  string `json:"content_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntVideoMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entvideometadata.FieldID, entvideometadata.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case entvideometadata.FieldURL, entvideometadata.FieldFilename, entvideometadata.FieldContentType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntVideoMetadata fields.
func (evm *EntVideoMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entvideometadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			evm.ID = int(value.Int64)
		case entvideometadata.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				evm.URL = value.String
			}
		case entvideometadata.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				evm.Filename = value.String
			}
		case entvideometadata.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				evm.FileSize = value.Int64
			}
		case entvideometadata.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				evm.ContentType = value.String
			}
		default:
			evm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntVideoMetadata.
// This includes values selected through modifiers, order, etc.
func (evm *EntVideoMetadata) Value(name string) (ent.Value, error) {
	return evm.selectValues.Get(name)
}

// Update returns a builder for updating this EntVideoMetadata.
// Note that you need to call EntVideoMetadata.Unwrap() before calling this method if this EntVideoMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (evm *EntVideoMetadata) Update() *EntVideoMetadataUpdateOne {
	return NewEntVideoMetadataClient(evm.config).UpdateOne(evm)
}

// Unwrap unwraps the EntVideoMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (evm *EntVideoMetadata) Unwrap() *EntVideoMetadata {
	_tx, ok := evm.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntVideoMetadata is not a transactional entity")
	}
	evm.config.driver = _tx.drv
	return evm
}

// String implements the fmt.Stringer.
func (evm *EntVideoMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("EntVideoMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", evm.ID))
	builder.WriteString("url=")
	builder.WriteString(evm.URL)
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(evm.Filename)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", evm.FileSize))
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(evm.ContentType)
	builder.WriteByte(')')
	return builder.String()
}

// EntVideoMetadataSlice is a parsable slice of EntVideoMetadata.
type EntVideoMetadataSlice []*EntVideoMetadata
