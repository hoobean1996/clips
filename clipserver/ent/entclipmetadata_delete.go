// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntClipMetadataDelete is the builder for deleting a EntClipMetadata entity.
type EntClipMetadataDelete struct {
	config
	hooks    []Hook
	mutation *EntClipMetadataMutation
}

// Where appends a list predicates to the EntClipMetadataDelete builder.
func (ecmd *EntClipMetadataDelete) Where(ps ...predicate.EntClipMetadata) *EntClipMetadataDelete {
	ecmd.mutation.Where(ps...)
	return ecmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ecmd *EntClipMetadataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ecmd.sqlExec, ecmd.mutation, ecmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmd *EntClipMetadataDelete) ExecX(ctx context.Context) int {
	n, err := ecmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ecmd *EntClipMetadataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(entclipmetadata.Table, sqlgraph.NewFieldSpec(entclipmetadata.FieldID, field.TypeInt))
	if ps := ecmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ecmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ecmd.mutation.done = true
	return affected, err
}

// EntClipMetadataDeleteOne is the builder for deleting a single EntClipMetadata entity.
type EntClipMetadataDeleteOne struct {
	ecmd *EntClipMetadataDelete
}

// Where appends a list predicates to the EntClipMetadataDelete builder.
func (ecmdo *EntClipMetadataDeleteOne) Where(ps ...predicate.EntClipMetadata) *EntClipMetadataDeleteOne {
	ecmdo.ecmd.mutation.Where(ps...)
	return ecmdo
}

// Exec executes the deletion query.
func (ecmdo *EntClipMetadataDeleteOne) Exec(ctx context.Context) error {
	n, err := ecmdo.ecmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{entclipmetadata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ecmdo *EntClipMetadataDeleteOne) ExecX(ctx context.Context) {
	if err := ecmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
