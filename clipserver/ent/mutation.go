// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"com.gigaboo/clipserver/ent/entclipmetadata"
	"com.gigaboo/clipserver/ent/entvideometadata"
	"com.gigaboo/clipserver/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntClipMetadata  = "EntClipMetadata"
	TypeEntVideoMetadata = "EntVideoMetadata"
)

// EntClipMetadataMutation represents an operation that mutates the EntClipMetadata nodes in the graph.
type EntClipMetadataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	filename      *string
	file_url      *string
	file_size     *int64
	addfile_size  *int64
	duration      *int
	addduration   *int
	format        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EntClipMetadata, error)
	predicates    []predicate.EntClipMetadata
}

var _ ent.Mutation = (*EntClipMetadataMutation)(nil)

// entclipmetadataOption allows management of the mutation configuration using functional options.
type entclipmetadataOption func(*EntClipMetadataMutation)

// newEntClipMetadataMutation creates new mutation for the EntClipMetadata entity.
func newEntClipMetadataMutation(c config, op Op, opts ...entclipmetadataOption) *EntClipMetadataMutation {
	m := &EntClipMetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeEntClipMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntClipMetadataID sets the ID field of the mutation.
func withEntClipMetadataID(id int) entclipmetadataOption {
	return func(m *EntClipMetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *EntClipMetadata
		)
		m.oldValue = func(ctx context.Context) (*EntClipMetadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntClipMetadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntClipMetadata sets the old EntClipMetadata of the mutation.
func withEntClipMetadata(node *EntClipMetadata) entclipmetadataOption {
	return func(m *EntClipMetadataMutation) {
		m.oldValue = func(context.Context) (*EntClipMetadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntClipMetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntClipMetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntClipMetadataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntClipMetadataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntClipMetadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFilename sets the "filename" field.
func (m *EntClipMetadataMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *EntClipMetadataMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the EntClipMetadata entity.
// If the EntClipMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntClipMetadataMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *EntClipMetadataMutation) ResetFilename() {
	m.filename = nil
}

// SetFileURL sets the "file_url" field.
func (m *EntClipMetadataMutation) SetFileURL(s string) {
	m.file_url = &s
}

// FileURL returns the value of the "file_url" field in the mutation.
func (m *EntClipMetadataMutation) FileURL() (r string, exists bool) {
	v := m.file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFileURL returns the old "file_url" field's value of the EntClipMetadata entity.
// If the EntClipMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntClipMetadataMutation) OldFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileURL: %w", err)
	}
	return oldValue.FileURL, nil
}

// ResetFileURL resets all changes to the "file_url" field.
func (m *EntClipMetadataMutation) ResetFileURL() {
	m.file_url = nil
}

// SetFileSize sets the "file_size" field.
func (m *EntClipMetadataMutation) SetFileSize(i int64) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *EntClipMetadataMutation) FileSize() (r int64, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the EntClipMetadata entity.
// If the EntClipMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntClipMetadataMutation) OldFileSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *EntClipMetadataMutation) AddFileSize(i int64) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *EntClipMetadataMutation) AddedFileSize() (r int64, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *EntClipMetadataMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
}

// SetDuration sets the "duration" field.
func (m *EntClipMetadataMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *EntClipMetadataMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the EntClipMetadata entity.
// If the EntClipMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntClipMetadataMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *EntClipMetadataMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *EntClipMetadataMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *EntClipMetadataMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetFormat sets the "format" field.
func (m *EntClipMetadataMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *EntClipMetadataMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the EntClipMetadata entity.
// If the EntClipMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntClipMetadataMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *EntClipMetadataMutation) ResetFormat() {
	m.format = nil
}

// Where appends a list predicates to the EntClipMetadataMutation builder.
func (m *EntClipMetadataMutation) Where(ps ...predicate.EntClipMetadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntClipMetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntClipMetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntClipMetadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntClipMetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntClipMetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntClipMetadata).
func (m *EntClipMetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntClipMetadataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.filename != nil {
		fields = append(fields, entclipmetadata.FieldFilename)
	}
	if m.file_url != nil {
		fields = append(fields, entclipmetadata.FieldFileURL)
	}
	if m.file_size != nil {
		fields = append(fields, entclipmetadata.FieldFileSize)
	}
	if m.duration != nil {
		fields = append(fields, entclipmetadata.FieldDuration)
	}
	if m.format != nil {
		fields = append(fields, entclipmetadata.FieldFormat)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntClipMetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entclipmetadata.FieldFilename:
		return m.Filename()
	case entclipmetadata.FieldFileURL:
		return m.FileURL()
	case entclipmetadata.FieldFileSize:
		return m.FileSize()
	case entclipmetadata.FieldDuration:
		return m.Duration()
	case entclipmetadata.FieldFormat:
		return m.Format()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntClipMetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entclipmetadata.FieldFilename:
		return m.OldFilename(ctx)
	case entclipmetadata.FieldFileURL:
		return m.OldFileURL(ctx)
	case entclipmetadata.FieldFileSize:
		return m.OldFileSize(ctx)
	case entclipmetadata.FieldDuration:
		return m.OldDuration(ctx)
	case entclipmetadata.FieldFormat:
		return m.OldFormat(ctx)
	}
	return nil, fmt.Errorf("unknown EntClipMetadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntClipMetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entclipmetadata.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case entclipmetadata.FieldFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileURL(v)
		return nil
	case entclipmetadata.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case entclipmetadata.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case entclipmetadata.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	}
	return fmt.Errorf("unknown EntClipMetadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntClipMetadataMutation) AddedFields() []string {
	var fields []string
	if m.addfile_size != nil {
		fields = append(fields, entclipmetadata.FieldFileSize)
	}
	if m.addduration != nil {
		fields = append(fields, entclipmetadata.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntClipMetadataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entclipmetadata.FieldFileSize:
		return m.AddedFileSize()
	case entclipmetadata.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntClipMetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entclipmetadata.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	case entclipmetadata.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown EntClipMetadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntClipMetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntClipMetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntClipMetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntClipMetadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntClipMetadataMutation) ResetField(name string) error {
	switch name {
	case entclipmetadata.FieldFilename:
		m.ResetFilename()
		return nil
	case entclipmetadata.FieldFileURL:
		m.ResetFileURL()
		return nil
	case entclipmetadata.FieldFileSize:
		m.ResetFileSize()
		return nil
	case entclipmetadata.FieldDuration:
		m.ResetDuration()
		return nil
	case entclipmetadata.FieldFormat:
		m.ResetFormat()
		return nil
	}
	return fmt.Errorf("unknown EntClipMetadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntClipMetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntClipMetadataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntClipMetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntClipMetadataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntClipMetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntClipMetadataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntClipMetadataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EntClipMetadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntClipMetadataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EntClipMetadata edge %s", name)
}

// EntVideoMetadataMutation represents an operation that mutates the EntVideoMetadata nodes in the graph.
type EntVideoMetadataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	url           *string
	filename      *string
	file_size     *int64
	addfile_size  *int64
	content_type  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EntVideoMetadata, error)
	predicates    []predicate.EntVideoMetadata
}

var _ ent.Mutation = (*EntVideoMetadataMutation)(nil)

// entvideometadataOption allows management of the mutation configuration using functional options.
type entvideometadataOption func(*EntVideoMetadataMutation)

// newEntVideoMetadataMutation creates new mutation for the EntVideoMetadata entity.
func newEntVideoMetadataMutation(c config, op Op, opts ...entvideometadataOption) *EntVideoMetadataMutation {
	m := &EntVideoMetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeEntVideoMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntVideoMetadataID sets the ID field of the mutation.
func withEntVideoMetadataID(id int) entvideometadataOption {
	return func(m *EntVideoMetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *EntVideoMetadata
		)
		m.oldValue = func(ctx context.Context) (*EntVideoMetadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntVideoMetadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntVideoMetadata sets the old EntVideoMetadata of the mutation.
func withEntVideoMetadata(node *EntVideoMetadata) entvideometadataOption {
	return func(m *EntVideoMetadataMutation) {
		m.oldValue = func(context.Context) (*EntVideoMetadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntVideoMetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntVideoMetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntVideoMetadataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntVideoMetadataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntVideoMetadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *EntVideoMetadataMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *EntVideoMetadataMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the EntVideoMetadata entity.
// If the EntVideoMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntVideoMetadataMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *EntVideoMetadataMutation) ResetURL() {
	m.url = nil
}

// SetFilename sets the "filename" field.
func (m *EntVideoMetadataMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *EntVideoMetadataMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the EntVideoMetadata entity.
// If the EntVideoMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntVideoMetadataMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *EntVideoMetadataMutation) ResetFilename() {
	m.filename = nil
}

// SetFileSize sets the "file_size" field.
func (m *EntVideoMetadataMutation) SetFileSize(i int64) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *EntVideoMetadataMutation) FileSize() (r int64, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the EntVideoMetadata entity.
// If the EntVideoMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntVideoMetadataMutation) OldFileSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *EntVideoMetadataMutation) AddFileSize(i int64) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *EntVideoMetadataMutation) AddedFileSize() (r int64, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *EntVideoMetadataMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
}

// SetContentType sets the "content_type" field.
func (m *EntVideoMetadataMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *EntVideoMetadataMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the EntVideoMetadata entity.
// If the EntVideoMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntVideoMetadataMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *EntVideoMetadataMutation) ResetContentType() {
	m.content_type = nil
}

// Where appends a list predicates to the EntVideoMetadataMutation builder.
func (m *EntVideoMetadataMutation) Where(ps ...predicate.EntVideoMetadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntVideoMetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntVideoMetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntVideoMetadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntVideoMetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntVideoMetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntVideoMetadata).
func (m *EntVideoMetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntVideoMetadataMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.url != nil {
		fields = append(fields, entvideometadata.FieldURL)
	}
	if m.filename != nil {
		fields = append(fields, entvideometadata.FieldFilename)
	}
	if m.file_size != nil {
		fields = append(fields, entvideometadata.FieldFileSize)
	}
	if m.content_type != nil {
		fields = append(fields, entvideometadata.FieldContentType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntVideoMetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entvideometadata.FieldURL:
		return m.URL()
	case entvideometadata.FieldFilename:
		return m.Filename()
	case entvideometadata.FieldFileSize:
		return m.FileSize()
	case entvideometadata.FieldContentType:
		return m.ContentType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntVideoMetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entvideometadata.FieldURL:
		return m.OldURL(ctx)
	case entvideometadata.FieldFilename:
		return m.OldFilename(ctx)
	case entvideometadata.FieldFileSize:
		return m.OldFileSize(ctx)
	case entvideometadata.FieldContentType:
		return m.OldContentType(ctx)
	}
	return nil, fmt.Errorf("unknown EntVideoMetadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntVideoMetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entvideometadata.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case entvideometadata.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case entvideometadata.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case entvideometadata.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	}
	return fmt.Errorf("unknown EntVideoMetadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntVideoMetadataMutation) AddedFields() []string {
	var fields []string
	if m.addfile_size != nil {
		fields = append(fields, entvideometadata.FieldFileSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntVideoMetadataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entvideometadata.FieldFileSize:
		return m.AddedFileSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntVideoMetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entvideometadata.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	}
	return fmt.Errorf("unknown EntVideoMetadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntVideoMetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntVideoMetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntVideoMetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntVideoMetadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntVideoMetadataMutation) ResetField(name string) error {
	switch name {
	case entvideometadata.FieldURL:
		m.ResetURL()
		return nil
	case entvideometadata.FieldFilename:
		m.ResetFilename()
		return nil
	case entvideometadata.FieldFileSize:
		m.ResetFileSize()
		return nil
	case entvideometadata.FieldContentType:
		m.ResetContentType()
		return nil
	}
	return fmt.Errorf("unknown EntVideoMetadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntVideoMetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntVideoMetadataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntVideoMetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntVideoMetadataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntVideoMetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntVideoMetadataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntVideoMetadataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EntVideoMetadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntVideoMetadataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EntVideoMetadata edge %s", name)
}
